using GeodicBankAPI.Domain.Entities;
using GeodicBankAPI.Domain;
using GeodicBankAPI.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using GeodicBankAPI.Application.Interfaces;
using System.IO;
using Microsoft.EntityFrameworkCore;
using System.Security.Cryptography;
using System.Text;
using DataStreamingService.Services;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;

namespace GeodicBankAPI.Controllers
{
    //[Authorize]
    [ApiController]
    [Route("api/[controller]")]
    public class UserController : ControllerBase
    {
        private readonly IConfiguration _config;
        private readonly FinancialDbContext _dbContext;
        private readonly IUser _user;
        private readonly ILogger<UserController> _logger;
        public UserController(IConfiguration config, FinancialDbContext dbContext, IUser user, ILogger<UserController> logger)
        {
            _config = config;
            _dbContext = dbContext;
            _user = user;
            _logger = logger;
        }
        [HttpPost("authenticate")]
        public IActionResult Authenticate([FromBody] UserDto user)
        {
            if (ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var authenticatedUser = _user.AuthenticateUser(user.Username, user.Password);

            //if (authenticatedUser != null)
            //{
            //    var tokenString = _user.CreateJwtToken(user);
            //    return Ok(new { Token = tokenString });
            //}
            return Unauthorized();
        }

        [HttpPost("Register")]
        public async Task<ActionResult<UserDto>> Register([FromBody]UserDto userDto)
        {

            if (await _user.UsernameExist(userDto.Username)) return BadRequest("UserName already Exists");

            var user = new User
            { 
                UserName = userDto.Username,
                Password =  Encoding.UTF8.GetBytes(userDto.Password),
            };

            var result = await _user.RegisterUser(user);
            if (result != null)
            {
                return Ok(result);
            }
            
            return BadRequest(result);

        }

        [HttpPost("Login")]
        public async Task<ActionResult<UserDto>> Login(User login)
        {

           return Ok();
        }

        [Route("VerifyUser")]
        [HttpPost]
        public ActionResult VerifyUser([FromBody] LoginRequest requestedStaff)
        {

            var isValid = false;
            var userName = requestedStaff.Username.ToLower().Trim();

            // Uncomment and fix these errors

            //using (var dbContext = new FinancialDbContext())
            //{
            //    if (requestedStaff.AuthKey == _config["Tokens:AuthKey"] || requestedStaff.AuthKey == _config["Tokens:AuthKey2"])
            //    {
            //        var possibleStaff = dbContext.StaffMember.Where(s => !s.IsSystemUser && s.CreatedBy != "AUTOGENERATED" && s.Username.ToLower().Trim() == userName && s.IsActive == true && s.IsDeleted == false && (s.ExpiryDate == null || s.ExpiryDate.Value.Date >= DateTime.Now.Date)).FirstOrDefault();
            //        if (possibleStaff != null)
            //        {
            //            isValid = BCrypt.Net.BCrypt.Verify(requestedStaff.Password, possibleStaff.Password);
            //        }
            //        if (possibleStaff != null && isValid)
            //        {
            //            var role = dbContext.Role.Where(r => r.Id == possibleStaff.RoleId && r.IsDeleted == false && r.IsActive == true).FirstOrDefault();
            //            var roleAccess = role != null ? dbContext.RoleAccessDefinition.Where(ra => ra.RoleId == role.Id && ra.IsDeleted == false && ra.IsActive == true).FirstOrDefault() : null;
            //            var department = dbContext.Department.Where(d => d.Id == possibleStaff.DepartmentId && !d.IsDeleted && d.IsActive).FirstOrDefault();

            //            var claims = new[]
            //            {
            //                new Claim("Username", possibleStaff.Username),
            //                new Claim(ClaimTypes.NameIdentifier, possibleStaff.NativeId.ToString()),
            //                new Claim("UserId", possibleStaff.Id),
            //                new Claim("UserFullName", $"{possibleStaff.LastName} {possibleStaff.OtherNames}")
            //            };


            //            var tokenKey = _config["Tokens:Key"];
            //            var issuer = _config["Tokens:Issuer"];
            //            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(tokenKey));

            //            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            //            var token = new JwtSecurityToken(issuer, issuer, claims, expires: DateTime.Now.AddHours(12), signingCredentials: creds);

            //            var data = new List<dynamic> {
            //                    new {
            //                        StaffMember = possibleStaff!=null?possibleStaff:new StaffMember(),
            //                        Department = department!=null?department:new Department(),
            //                        RoleAccessDefinition = roleAccess!=null?roleAccess:new RoleAccessDefinition(),
            //                        Role = role,
            //                        TemplateAssignments = new {}
            //                    }
            //                };

            //            return Ok(new { authToken = new JwtSecurityTokenHandler().WriteToken(token), data = data });
            //            // }

            //        }
            //        return BadRequest("Invalid Username/Password");
            //    }

            //    return BadRequest("client not registered");
            //}
            return Ok(userName); //remove this
        }

        //[HttpGet("TestLog")]
        //public void TestLog()
        //{
        //    try
        //    {
        //        _logger.LogInformation("Test log");
        //    }
        //    catch (Exception ex)
        //    {
        //        _logger.LogError(message: ex.Message, ex);
        //        throw;
        //    }
        //}


    }
}
